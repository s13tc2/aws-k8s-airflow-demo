name: k8s-Apply

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to run tests against"
        type: environment
        required: true

env:
  TERRAFORM_VERSION: "1.5.7"
  K8S_NAMESPACE: "app" # Add namespace env var
  INGRESS_CONTROLLER_NAMESPACE: "kube-system"

jobs:
  infra:
    runs-on: ubuntu-latest
    outputs:
      # airflow_repository: ${{ steps.apply.outputs.airflow_repository }}
      # airflow_repository_url: ${{ steps.apply.outputs.airflow_repository_url }}
      kubernetes_cluster_name: ${{ steps.apply.outputs.kubernetes_cluster_name }}
      primary_region: ${{ steps.apply.outputs.primary_region }}
      console_role: ${{ steps.apply.outputs.console_role }}
      admin_group: ${{ steps.apply.outputs.admin_group }}
      alb_controller_role: ${{ steps.apply.outputs.alb_controller_role }}
      workload_identity_role: ${{ steps.apply.outputs.workload_identity_role }}
    environment:
      name: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v3

      - id: setup
        name: Setup `terraform`
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - id: apply
        name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BACKEND_BUCKET_NAME: ${{ vars.BUCKET_NAME }}
          BACKEND_REGION: ${{ vars.BUCKET_REGION }}
          BACKEND_KEY: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}
        working-directory: ${{ vars.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          terraform init \
            -backend-config='bucket='$BACKEND_BUCKET_NAME \
            -backend-config='region='$BACKEND_REGION \
            -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}"

          terraform apply -target "random_shuffle.az" -auto-approve
          terraform apply -auto-approve

          kubernetes_cluster_name=$(terraform output -raw kubernetes_cluster_name)
          echo "kubernetes_cluster_name=$kubernetes_cluster_name" >> "$GITHUB_OUTPUT"

          primary_region=$(terraform output -raw primary_region)
          echo "primary_region=$primary_region" >> "$GITHUB_OUTPUT"

          console_role=$(terraform output -raw console_role_arn)
          echo "console_role=$console_role" >> "$GITHUB_OUTPUT"

          alb_controller_role=$(terraform output -raw alb_controller_role)
          echo "alb_controller_role=$alb_controller_role" >> "$GITHUB_OUTPUT"

          workload_identity_role=$(terraform output -raw workload_identity_role)
          echo "workload_identity_role=$workload_identity_role" >> "$GITHUB_OUTPUT"

          admin_group=$(terraform output -raw admin_group_arn)
          echo "admin_group=$admin_group" >> "$GITHUB_OUTPUT"

          # airflow_repository=$(terraform output -raw airflow_repository)
          # echo "airflow_repository=$airflow_repository" >> "$GITHUB_OUTPUT"

          # airflow_repository_url=$(terraform output -raw airflow_repository_url)
          # echo "airflow_repository_url=$airflow_repository_url" >> "$GITHUB_OUTPUT"

  k8s:
    runs-on: ubuntu-latest
    needs: infra
    environment:
      name: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v3

      - id: setup
        name: Setup `terraform`
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.infra.outputs.primary_region }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update kubeconfig for EKS Cluster
        run: |
          aws eks update-kubeconfig --name ${{ needs.infra.outputs.kubernetes_cluster_name }} --region ${{ needs.infra.outputs.primary_region }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      # - name: Pre-deployment Checks
      #   run: |
      #     echo "Checking EBS CSI Driver installation..."
      #     kubectl get pods -n kube-system | grep ebs-csi

      #     echo "Checking existing storage classes..."
      #     kubectl get storageclass

      #     echo "Checking node capacity..."
      #     kubectl describe nodes | grep -A 5 "Allocated resources"

      #     echo "Checking existing PVCs..."
      #     kubectl get pvc -n airflow

      #     echo "Checking existing pods..."
      #     kubectl get pods -n airflow

      #     echo "Checking existing events..."
      #     kubectl get events -n airflow --sort-by='.lastTimestamp'

      #     echo "Checking cluster status..."
      #     kubectl get nodes
      #     kubectl top nodes || echo "Metrics server might not be installed"

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod +x get_helm.sh
          ./get_helm.sh
          helm version

          helm repo add apache-airflow https://airflow.apache.org
          helm upgrade --install airflow apache-airflow/airflow --namespace airflow --create-namespace

      # - name: Clean up existing deployment
      #   run: |
      #     echo "Cleaning up existing Airflow namespace..."
      #     kubectl delete namespace airflow --ignore-not-found=true

      #     echo "Waiting for namespace deletion..."
      #     kubectl wait --for=delete namespace/airflow --timeout=300s || true

      #     echo "Creating new Airflow namespace..."
      #     kubectl create namespace airflow

      # - id: Apply
      #   name: Terraform Apply
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ needs.infra.outputs.primary_region }}
      #     AWS_DEFAULT_REGION: ${{ needs.infra.outputs.primary_region }}
      #     BACKEND_BUCKET_NAME: ${{ vars.BUCKET_NAME }}
      #     BACKEND_REGION: ${{ vars.BUCKET_REGION }}
      #     BACKEND_KEY: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-k8s
      #     TF_VAR_application_name: ${{ vars.APPLICATION_NAME }}
      #     TF_VAR_environment_name: ${{ vars.ENVIRONMENT_NAME }}
      #     TF_VAR_cluster_name: ${{ needs.infra.outputs.kubernetes_cluster_name }}
      #     TF_VAR_primary_region: ${{ needs.infra.outputs.primary_region }}
      #     TF_VAR_alb_controller_role: ${{ needs.infra.outputs.alb_controller_role }}
      #     TF_VAR_workload_identity_role: ${{ needs.infra.outputs.workload_identity_role }}
      #     TF_VAR_fernet_key_secret_name: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-fernet-key
      #     TF_VAR_connection_string_secret_name: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-connection-string
      #   working-directory: ./src/terraform/k8s
      #   run: |
      #     terraform init \
      #       -backend-config='bucket='$BACKEND_BUCKET_NAME \
      #       -backend-config='region='$BACKEND_REGION \
      #       -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-k8s"

      #     terraform apply -auto-approve

      - name: Post-deployment Checks
        run: |
          echo "Waiting for pods to be ready..."
          kubectl wait --for=condition=ready pod -l component=webserver -n airflow --timeout=600s || true
          kubectl wait --for=condition=ready pod -l component=scheduler -n airflow --timeout=600s || true

          echo "Checking pod status..."
          kubectl get pods -n airflow

          echo "Checking PVC status..."
          kubectl get pvc -n airflow

          echo "Checking pod logs..."
          for pod in $(kubectl get pods -n airflow -o name); do
            echo "=== Logs for $pod ==="
            kubectl logs $pod -n airflow --tail=50 || true
          done

          echo "Checking events..."
          kubectl get events -n airflow --sort-by='.lastTimestamp'

          echo "Checking service status..."
          kubectl get svc -n airflow

          echo "Checking storage class..."
          kubectl get storageclass

          echo "Checking persistent volumes..."
          kubectl get pv

      - name: Setup eksctl
        run: |
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH

          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check

          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          rm eksctl_$PLATFORM.tar.gz

          eksctl version

      - name: Configure IAM Mappings
        run: |
          eksctl get clusters
          eksctl get iamidentitymapping --cluster ${{ needs.infra.outputs.kubernetes_cluster_name }} --region=${{ needs.infra.outputs.primary_region }}

          eksctl create iamidentitymapping \
            --cluster ${{ needs.infra.outputs.kubernetes_cluster_name }} \
            --region=${{ needs.infra.outputs.primary_region }} \
            --arn ${{ needs.infra.outputs.console_role }} \
            --group eks-console-dashboard-full-access-group \
            --no-duplicate-arns

          eksctl create iamidentitymapping \
            --cluster ${{ needs.infra.outputs.kubernetes_cluster_name }} \
            --region=${{ needs.infra.outputs.primary_region }} \
            --arn arn:aws:iam::312344499806:user/markti \
            --group eks-console-dashboard-restricted-access-group \
            --no-duplicate-arns
